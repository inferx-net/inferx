// Copyright (c) 2025 InferX Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";
package na;

service SchedulerService {
  rpc LeaseWorker(LeaseWorkerReq) returns (LeaseWorkerResp) {}
  rpc ReturnWorker(ReturnWorkerReq) returns (ReturnWorkerResp) {}
  rpc RefreshGateway(RefreshGatewayReq) returns (RefreshGatewayResp) {}
}

service NodeAgentService {
  rpc GetPod(GetPodReq) returns (GetPodResp) {}
  rpc TerminatePod(TerminatePodReq) returns (TerminatePodResp) {}
  rpc HibernatePod(HibernatePodReq) returns (HibernatePodResp) {}
  rpc SnapshotPod(SnapshotPodReq) returns (SnapshotPodResp) {}
  rpc WakeupPod(WakeupPodReq) returns (WakeupPodResp) {}
  rpc ResumePod(ResumePodReq) returns (ResumePodResp) {}
  rpc CreateFuncPod(CreateFuncPodReq) returns (CreateFuncPodResp) {}
  rpc ReadPodLog(ReadPodLogReq) returns (ReadPodLogResp) {}
  rpc RemoveSnapshot(RemoveSnapshotReq) returns (RemoveSnapshotResp) {}
}
///////////////////////////////////////////////////////////////////////

message RemoveSnapshotReq {
  string funckey = 1;
}

message RemoveSnapshotResp {
  string error = 1;
}

message LeaseWorkerReq {
  string tenant = 1;
  string namespace = 2;
  string funcname = 3;
  int64  fprevision = 4;
  int64  gateway_id = 5;
}

message LeaseWorkerResp {
  string error = 1;
  string id = 3;
  uint32 ipaddr = 4;
  bool   keepalive = 5;  
  uint32 hostipaddr = 6;
  uint32 hostport = 7;
}

message ReturnWorkerReq {
  string tenant = 1;
  string namespace = 2;
  string funcname = 3;
  int64 fprevision = 4;
  string id = 5;
}

message ReturnWorkerResp {
  string error = 1;
}

message RefreshGatewayReq {
  int64  gateway_id = 1;
}

message RefreshGatewayResp {
  string error = 1;
}

message NodeAgentRespMsg {
  oneof MessageBody {
    NodeAgentResp nodeAgentResp = 100;
    NodeAgentStreamMsg nodeAgentStreamMsg = 200;
  }
}

message NodeAgentReq {
  uint64 requestId = 1;
  oneof MessageBody {
    NodeConfigReq nodeConfigReq = 100;
    CreatePodReq createPodReq = 200;
    TerminatePodReq terminatePodReq = 300;
    ReadFuncLogReq readFuncLogReq = 400;
  }
}

message NodeAgentResp {
  uint64 requestId = 1;
  string error = 2;
  oneof MessageBody {
    NodeConfigResp nodeConfigResp = 100;
    CreatePodResp createPodResp = 200;
    TerminatePodResp terminatePodResp = 300;
    ReadFuncLogResp readFuncLogResp = 400;
  }
}

message Env {
  string name = 1;
  string value = 2;
}

message Mount {
  string host_path = 1;
  string mount_path = 2;
}

message ContainerPort {
  int32 host_port = 1;
  int32 container_port = 2;
}

message KV {
  string key = 1;
  string val = 2;
} 

enum CreatePodType {
  Normal = 0;
  Snapshot = 2;
  Restore = 3;
}

message CreateFuncPodReq {
  string tenant = 1;
  string namespace = 2;
  string funcname = 3;
  int64  fprevision = 4;
  string id = 5;
  repeated KV labels = 6;
  repeated KV annotations = 7;
  CreatePodType create_type = 8;
  string funcspec = 9;
  string alloc_resources = 10;
  string resource_quota = 11;
  repeated TerminatePodReq terminate_pods = 12;
}

message CreateFuncPodResp {
  string error = 1;
  uint32 ipaddress = 2;
}

message FuncPodSpec {
  string image = 4;
  repeated string commands = 7;
  repeated Env envs = 8;
  repeated Mount mounts = 9;
  repeated ContainerPort ports = 10;
}

message FuncPodDeploy {
  string name = 1;
  uint32 ipaddress = 2;
}

message FuncReplicas {
  string name = 1;
  int32 replica = 2;
  int32 min_replica = 3;
  oneof Set {
    FuncPodSpec spec = 100;
    FuncReplicas set = 200;
  }
}

message FuncReplicasDeploy {
  string name = 1;
  repeated FuncPodDeploy pods = 2;
}

message CreateFuncServiceReq {
  string tenant = 1;
  string namespace = 2;
  string name = 3;
  repeated KV labels = 5;
  repeated KV annotations = 6;
  repeated FuncReplicas sets = 7;
}

message CreateFuncServiceResp {
  string error = 1;
  repeated FuncReplicasDeploy replicas = 2;
}

message ReadFuncLogReq {
  string namespace = 1;
  string funcname = 2;
  uint64 offset = 3;
  uint32 len = 4;
}

message ReadFuncLogResp {
  string error = 1;
  string content = 2;
}

message NodeConfigReq {
  string clusterDomain = 1;
  string node = 2;
}

message NodeConfigResp {
  string error = 1;
}

message CreatePodReq {
  string pod = 1;
  string configMap = 2;
}

message CreatePodResp {
    string error = 1;
}

message TerminatePodReq {
  string tenant = 1;
  string namespace = 2;
  string funcname = 3;
  int64  fprevision = 4;
  string id = 5;
}

message TerminatePodResp {
  string error = 1;
}

message SnapshotPodReq {
  string tenant = 1;
  string namespace = 2;
  string funcname = 3;
  int64  fprevision = 4;
  string id = 5;
}

message SnapshotPodResp {
  string error = 1;
}

message HibernatePodReq {
  string tenant = 1;
  string namespace = 2;
  string funcname = 3;
  int64  fprevision = 4;
  string id = 5;
  uint32 hibernateType = 6; // 1: GPU 2: Disk
}

message HibernatePodResp {
  string error = 1;
}

message ReadPodLogReq {
  string tenant = 1;
  string namespace = 2;
  string funcname = 3;
  int64  fprevision = 4;
  string id = 5;
}

message ReadPodLogResp {
  string error = 1;
  string log = 2;
}

message WakeupPodReq {
  string tenant = 1;
  string namespace = 2;
  string funcname = 3;
  int64  fprevision = 4;
  string id = 5;
  uint32 hibernateType = 6; // 1: GPU 2: Disk
  string alloc_resources = 7;
}

message WakeupPodResp {
  string error = 1;
}

message ResumePodReq {
  string tenant = 1;
  string namespace = 2;
  string funcname = 3;
  int64  fprevision = 4;
  string id = 5;
  string alloc_resources = 7;
  repeated TerminatePodReq terminate_pods = 8;
}

message ResumePodResp {
  string error = 1;
}

message GetPodReq {
  string tenant = 1;
  string namespace = 2;
  string funcname = 3;
  string id = 4;
}

message GetPodResp {
  string error = 1;
  string pod = 2;
  int64 revision = 3;
}

message NodeAgentStreamMsg {
  oneof EventBody {
    NodeRegister nodeRegister = 100;
    NodeUpdate nodeUpdate = 200;
    PodEvent podEvent = 300;
  }
}

message NodeRegister {
  int64 revision = 2;
  string node = 3; 
  repeated string pods = 4; 
}

message NodeUpdate {
  int64 revision = 2;
  string node = 3; 
}

enum EventType {
  Add = 0;
  Update = 2;
  Delete = 3;
}

message PodEvent {
  EventType eventType = 1;
  int64 revision = 2;
  string pod = 3; 
}
